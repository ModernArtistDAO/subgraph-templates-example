// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DisabledModule extends ethereum.Event {
  get params(): DisabledModule__Params {
    return new DisabledModule__Params(this);
  }
}

export class DisabledModule__Params {
  _event: DisabledModule;

  constructor(event: DisabledModule) {
    this._event = event;
  }

  get module(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class EnabledModule extends ethereum.Event {
  get params(): EnabledModule__Params {
    return new EnabledModule__Params(this);
  }
}

export class EnabledModule__Params {
  _event: EnabledModule;

  constructor(event: EnabledModule) {
    this._event = event;
  }

  get module(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ExecutionFromModuleFailure extends ethereum.Event {
  get params(): ExecutionFromModuleFailure__Params {
    return new ExecutionFromModuleFailure__Params(this);
  }
}

export class ExecutionFromModuleFailure__Params {
  _event: ExecutionFromModuleFailure;

  constructor(event: ExecutionFromModuleFailure) {
    this._event = event;
  }

  get module(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ExecutionFromModuleSuccess extends ethereum.Event {
  get params(): ExecutionFromModuleSuccess__Params {
    return new ExecutionFromModuleSuccess__Params(this);
  }
}

export class ExecutionFromModuleSuccess__Params {
  _event: ExecutionFromModuleSuccess;

  constructor(event: ExecutionFromModuleSuccess) {
    this._event = event;
  }

  get module(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PrizePoolModuleManager__execTransactionFromModuleReturnDataResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }
}

export class PrizePoolModuleManager__getModulesPaginatedResult {
  value0: Array<Address>;
  value1: Address;

  constructor(value0: Array<Address>, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class PrizePoolModuleManager extends ethereum.SmartContract {
  static bind(address: Address): PrizePoolModuleManager {
    return new PrizePoolModuleManager("PrizePoolModuleManager", address);
  }

  credit(): Address {
    let result = super.call("credit", "credit():(address)", []);

    return result[0].toAddress();
  }

  try_credit(): ethereum.CallResult<Address> {
    let result = super.tryCall("credit", "credit():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  execTransactionFromModule(
    to: Address,
    value: BigInt,
    data: Bytes,
    operation: i32
  ): boolean {
    let result = super.call(
      "execTransactionFromModule",
      "execTransactionFromModule(address,uint256,bytes,uint8):(bool)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(operation))
      ]
    );

    return result[0].toBoolean();
  }

  try_execTransactionFromModule(
    to: Address,
    value: BigInt,
    data: Bytes,
    operation: i32
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "execTransactionFromModule",
      "execTransactionFromModule(address,uint256,bytes,uint8):(bool)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(operation))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  execTransactionFromModuleReturnData(
    to: Address,
    value: BigInt,
    data: Bytes,
    operation: i32
  ): PrizePoolModuleManager__execTransactionFromModuleReturnDataResult {
    let result = super.call(
      "execTransactionFromModuleReturnData",
      "execTransactionFromModuleReturnData(address,uint256,bytes,uint8):(bool,bytes)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(operation))
      ]
    );

    return new PrizePoolModuleManager__execTransactionFromModuleReturnDataResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_execTransactionFromModuleReturnData(
    to: Address,
    value: BigInt,
    data: Bytes,
    operation: i32
  ): ethereum.CallResult<
    PrizePoolModuleManager__execTransactionFromModuleReturnDataResult
  > {
    let result = super.tryCall(
      "execTransactionFromModuleReturnData",
      "execTransactionFromModuleReturnData(address,uint256,bytes,uint8):(bool,bytes)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(operation))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PrizePoolModuleManager__execTransactionFromModuleReturnDataResult(
        value[0].toBoolean(),
        value[1].toBytes()
      )
    );
  }

  getModules(): Array<Address> {
    let result = super.call("getModules", "getModules():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getModules(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getModules", "getModules():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getModulesPaginated(
    start: Address,
    pageSize: BigInt
  ): PrizePoolModuleManager__getModulesPaginatedResult {
    let result = super.call(
      "getModulesPaginated",
      "getModulesPaginated(address,uint256):(address[],address)",
      [
        ethereum.Value.fromAddress(start),
        ethereum.Value.fromUnsignedBigInt(pageSize)
      ]
    );

    return new PrizePoolModuleManager__getModulesPaginatedResult(
      result[0].toAddressArray(),
      result[1].toAddress()
    );
  }

  try_getModulesPaginated(
    start: Address,
    pageSize: BigInt
  ): ethereum.CallResult<PrizePoolModuleManager__getModulesPaginatedResult> {
    let result = super.tryCall(
      "getModulesPaginated",
      "getModulesPaginated(address,uint256):(address[],address)",
      [
        ethereum.Value.fromAddress(start),
        ethereum.Value.fromUnsignedBigInt(pageSize)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PrizePoolModuleManager__getModulesPaginatedResult(
        value[0].toAddressArray(),
        value[1].toAddress()
      )
    );
  }

  getTrustedForwarder(): Address {
    let result = super.call(
      "getTrustedForwarder",
      "getTrustedForwarder():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getTrustedForwarder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTrustedForwarder",
      "getTrustedForwarder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  interestTracker(): Address {
    let result = super.call(
      "interestTracker",
      "interestTracker():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_interestTracker(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "interestTracker",
      "interestTracker():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isModuleEnabled(module: Address): boolean {
    let result = super.call(
      "isModuleEnabled",
      "isModuleEnabled(address):(bool)",
      [ethereum.Value.fromAddress(module)]
    );

    return result[0].toBoolean();
  }

  try_isModuleEnabled(module: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isModuleEnabled",
      "isModuleEnabled(address):(bool)",
      [ethereum.Value.fromAddress(module)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  prizePool(): Address {
    let result = super.call("prizePool", "prizePool():(address)", []);

    return result[0].toAddress();
  }

  try_prizePool(): ethereum.CallResult<Address> {
    let result = super.tryCall("prizePool", "prizePool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sponsorship(): Address {
    let result = super.call("sponsorship", "sponsorship():(address)", []);

    return result[0].toAddress();
  }

  try_sponsorship(): ethereum.CallResult<Address> {
    let result = super.tryCall("sponsorship", "sponsorship():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ticket(): Address {
    let result = super.call("ticket", "ticket():(address)", []);

    return result[0].toAddress();
  }

  try_ticket(): ethereum.CallResult<Address> {
    let result = super.tryCall("ticket", "ticket():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  timelock(): Address {
    let result = super.call("timelock", "timelock():(address)", []);

    return result[0].toAddress();
  }

  try_timelock(): ethereum.CallResult<Address> {
    let result = super.tryCall("timelock", "timelock():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  yieldService(): Address {
    let result = super.call("yieldService", "yieldService():(address)", []);

    return result[0].toAddress();
  }

  try_yieldService(): ethereum.CallResult<Address> {
    let result = super.tryCall("yieldService", "yieldService():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class DisableModuleCall extends ethereum.Call {
  get inputs(): DisableModuleCall__Inputs {
    return new DisableModuleCall__Inputs(this);
  }

  get outputs(): DisableModuleCall__Outputs {
    return new DisableModuleCall__Outputs(this);
  }
}

export class DisableModuleCall__Inputs {
  _call: DisableModuleCall;

  constructor(call: DisableModuleCall) {
    this._call = call;
  }

  get prevModule(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get module(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DisableModuleCall__Outputs {
  _call: DisableModuleCall;

  constructor(call: DisableModuleCall) {
    this._call = call;
  }
}

export class EnableModuleCall extends ethereum.Call {
  get inputs(): EnableModuleCall__Inputs {
    return new EnableModuleCall__Inputs(this);
  }

  get outputs(): EnableModuleCall__Outputs {
    return new EnableModuleCall__Outputs(this);
  }
}

export class EnableModuleCall__Inputs {
  _call: EnableModuleCall;

  constructor(call: EnableModuleCall) {
    this._call = call;
  }

  get module(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class EnableModuleCall__Outputs {
  _call: EnableModuleCall;

  constructor(call: EnableModuleCall) {
    this._call = call;
  }
}

export class EnableModuleInterfaceCall extends ethereum.Call {
  get inputs(): EnableModuleInterfaceCall__Inputs {
    return new EnableModuleInterfaceCall__Inputs(this);
  }

  get outputs(): EnableModuleInterfaceCall__Outputs {
    return new EnableModuleInterfaceCall__Outputs(this);
  }
}

export class EnableModuleInterfaceCall__Inputs {
  _call: EnableModuleInterfaceCall;

  constructor(call: EnableModuleInterfaceCall) {
    this._call = call;
  }

  get hashName(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class EnableModuleInterfaceCall__Outputs {
  _call: EnableModuleInterfaceCall;

  constructor(call: EnableModuleInterfaceCall) {
    this._call = call;
  }
}

export class ExecTransactionFromModuleCall extends ethereum.Call {
  get inputs(): ExecTransactionFromModuleCall__Inputs {
    return new ExecTransactionFromModuleCall__Inputs(this);
  }

  get outputs(): ExecTransactionFromModuleCall__Outputs {
    return new ExecTransactionFromModuleCall__Outputs(this);
  }
}

export class ExecTransactionFromModuleCall__Inputs {
  _call: ExecTransactionFromModuleCall;

  constructor(call: ExecTransactionFromModuleCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get operation(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class ExecTransactionFromModuleCall__Outputs {
  _call: ExecTransactionFromModuleCall;

  constructor(call: ExecTransactionFromModuleCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ExecTransactionFromModuleReturnDataCall extends ethereum.Call {
  get inputs(): ExecTransactionFromModuleReturnDataCall__Inputs {
    return new ExecTransactionFromModuleReturnDataCall__Inputs(this);
  }

  get outputs(): ExecTransactionFromModuleReturnDataCall__Outputs {
    return new ExecTransactionFromModuleReturnDataCall__Outputs(this);
  }
}

export class ExecTransactionFromModuleReturnDataCall__Inputs {
  _call: ExecTransactionFromModuleReturnDataCall;

  constructor(call: ExecTransactionFromModuleReturnDataCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get operation(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class ExecTransactionFromModuleReturnDataCall__Outputs {
  _call: ExecTransactionFromModuleReturnDataCall;

  constructor(call: ExecTransactionFromModuleReturnDataCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get returnData(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _trustedForwarder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
