// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class PrizePoolBuilder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PrizePoolBuilder entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PrizePoolBuilder entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PrizePoolBuilder", id.toString(), this);
  }

  static load(id: string): PrizePoolBuilder | null {
    return store.get("PrizePoolBuilder", id) as PrizePoolBuilder | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class PrizePoolModuleManager extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save PrizePoolModuleManager entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PrizePoolModuleManager entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PrizePoolModuleManager", id.toString(), this);
  }

  static load(id: string): PrizePoolModuleManager | null {
    return store.get(
      "PrizePoolModuleManager",
      id
    ) as PrizePoolModuleManager | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get prizePoolBuilder(): string {
    let value = this.get("prizePoolBuilder");
    return value.toString();
  }

  set prizePoolBuilder(value: string) {
    this.set("prizePoolBuilder", Value.fromString(value));
  }
}

export class PeriodicPrizePool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PeriodicPrizePool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PeriodicPrizePool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PeriodicPrizePool", id.toString(), this);
  }

  static load(id: string): PeriodicPrizePool | null {
    return store.get("PeriodicPrizePool", id) as PeriodicPrizePool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get prizePoolModuleManager(): string {
    let value = this.get("prizePoolModuleManager");
    return value.toString();
  }

  set prizePoolModuleManager(value: string) {
    this.set("prizePoolModuleManager", Value.fromString(value));
  }

  get number(): BigInt {
    let value = this.get("number");
    return value.toBigInt();
  }

  set number(value: BigInt) {
    this.set("number", Value.fromBigInt(value));
  }
}
