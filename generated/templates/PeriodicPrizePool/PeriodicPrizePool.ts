// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PrizePoolAwardCompleted extends ethereum.Event {
  get params(): PrizePoolAwardCompleted__Params {
    return new PrizePoolAwardCompleted__Params(this);
  }
}

export class PrizePoolAwardCompleted__Params {
  _event: PrizePoolAwardCompleted;

  constructor(event: PrizePoolAwardCompleted) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get prize(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get reserveFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get randomNumber(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class PrizePoolAwardStarted extends ethereum.Event {
  get params(): PrizePoolAwardStarted__Params {
    return new PrizePoolAwardStarted__Params(this);
  }
}

export class PrizePoolAwardStarted__Params {
  _event: PrizePoolAwardStarted;

  constructor(event: PrizePoolAwardStarted) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rngRequestId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PrizePoolOpened extends ethereum.Event {
  get params(): PrizePoolOpened__Params {
    return new PrizePoolOpened__Params(this);
  }
}

export class PrizePoolOpened__Params {
  _event: PrizePoolOpened;

  constructor(event: PrizePoolOpened) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get prizePeriodStartedAt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PeriodicPrizePool extends ethereum.SmartContract {
  static bind(address: Address): PeriodicPrizePool {
    return new PeriodicPrizePool("PeriodicPrizePool", address);
  }

  calculateExitFee(user: Address, tickets: BigInt): BigInt {
    let result = super.call(
      "calculateExitFee",
      "calculateExitFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(tickets)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateExitFee(
    user: Address,
    tickets: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateExitFee",
      "calculateExitFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(tickets)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateUnlockTimestamp(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "calculateUnlockTimestamp",
      "calculateUnlockTimestamp(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateUnlockTimestamp(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateUnlockTimestamp",
      "calculateUnlockTimestamp(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canCompleteAward(): boolean {
    let result = super.call(
      "canCompleteAward",
      "canCompleteAward():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_canCompleteAward(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canCompleteAward",
      "canCompleteAward():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  canImplementInterfaceForAddress(interfaceHash: Bytes, addr: Address): Bytes {
    let result = super.call(
      "canImplementInterfaceForAddress",
      "canImplementInterfaceForAddress(bytes32,address):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(interfaceHash),
        ethereum.Value.fromAddress(addr)
      ]
    );

    return result[0].toBytes();
  }

  try_canImplementInterfaceForAddress(
    interfaceHash: Bytes,
    addr: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "canImplementInterfaceForAddress",
      "canImplementInterfaceForAddress(bytes32,address):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(interfaceHash),
        ethereum.Value.fromAddress(addr)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  canStartAward(): boolean {
    let result = super.call("canStartAward", "canStartAward():(bool)", []);

    return result[0].toBoolean();
  }

  try_canStartAward(): ethereum.CallResult<boolean> {
    let result = super.tryCall("canStartAward", "canStartAward():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  currentPrize(): BigInt {
    let result = super.call("currentPrize", "currentPrize():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentPrize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentPrize", "currentPrize():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  estimatePrize(): BigInt {
    let result = super.call("estimatePrize", "estimatePrize():(uint256)", []);

    return result[0].toBigInt();
  }

  try_estimatePrize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimatePrize",
      "estimatePrize():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  estimatePrizeWithBlockTime(secondsPerBlockFixedPoint18: BigInt): BigInt {
    let result = super.call(
      "estimatePrizeWithBlockTime",
      "estimatePrizeWithBlockTime(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(secondsPerBlockFixedPoint18)]
    );

    return result[0].toBigInt();
  }

  try_estimatePrizeWithBlockTime(
    secondsPerBlockFixedPoint18: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimatePrizeWithBlockTime",
      "estimatePrizeWithBlockTime(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(secondsPerBlockFixedPoint18)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  estimateRemainingBlocksToPrize(secondsPerBlockFixedPoint18: BigInt): BigInt {
    let result = super.call(
      "estimateRemainingBlocksToPrize",
      "estimateRemainingBlocksToPrize(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(secondsPerBlockFixedPoint18)]
    );

    return result[0].toBigInt();
  }

  try_estimateRemainingBlocksToPrize(
    secondsPerBlockFixedPoint18: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimateRemainingBlocksToPrize",
      "estimateRemainingBlocksToPrize(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(secondsPerBlockFixedPoint18)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  estimateRemainingPrize(): BigInt {
    let result = super.call(
      "estimateRemainingPrize",
      "estimateRemainingPrize():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_estimateRemainingPrize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimateRemainingPrize",
      "estimateRemainingPrize():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  estimateRemainingPrizeWithBlockTime(
    secondsPerBlockFixedPoint18: BigInt
  ): BigInt {
    let result = super.call(
      "estimateRemainingPrizeWithBlockTime",
      "estimateRemainingPrizeWithBlockTime(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(secondsPerBlockFixedPoint18)]
    );

    return result[0].toBigInt();
  }

  try_estimateRemainingPrizeWithBlockTime(
    secondsPerBlockFixedPoint18: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimateRemainingPrizeWithBlockTime",
      "estimateRemainingPrizeWithBlockTime(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(secondsPerBlockFixedPoint18)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeScaleMantissa(): BigInt {
    let result = super.call(
      "feeScaleMantissa",
      "feeScaleMantissa():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_feeScaleMantissa(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feeScaleMantissa",
      "feeScaleMantissa():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTrustedForwarder(): Address {
    let result = super.call(
      "getTrustedForwarder",
      "getTrustedForwarder():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getTrustedForwarder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTrustedForwarder",
      "getTrustedForwarder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hashName(): Bytes {
    let result = super.call("hashName", "hashName():(bytes32)", []);

    return result[0].toBytes();
  }

  try_hashName(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("hashName", "hashName():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  isPrizePeriodOver(): boolean {
    let result = super.call(
      "isPrizePeriodOver",
      "isPrizePeriodOver():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isPrizePeriodOver(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isPrizePeriodOver",
      "isPrizePeriodOver():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isRngCompleted(): boolean {
    let result = super.call("isRngCompleted", "isRngCompleted():(bool)", []);

    return result[0].toBoolean();
  }

  try_isRngCompleted(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isRngCompleted", "isRngCompleted():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isRngRequested(): boolean {
    let result = super.call("isRngRequested", "isRngRequested():(bool)", []);

    return result[0].toBoolean();
  }

  try_isRngRequested(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isRngRequested", "isRngRequested():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  previousPrize(): BigInt {
    let result = super.call("previousPrize", "previousPrize():(uint256)", []);

    return result[0].toBigInt();
  }

  try_previousPrize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previousPrize",
      "previousPrize():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previousPrizeAverageTickets(): BigInt {
    let result = super.call(
      "previousPrizeAverageTickets",
      "previousPrizeAverageTickets():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_previousPrizeAverageTickets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previousPrizeAverageTickets",
      "previousPrizeAverageTickets():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  prizePeriodEndAt(): BigInt {
    let result = super.call(
      "prizePeriodEndAt",
      "prizePeriodEndAt():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_prizePeriodEndAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "prizePeriodEndAt",
      "prizePeriodEndAt():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  prizePeriodRemainingSeconds(): BigInt {
    let result = super.call(
      "prizePeriodRemainingSeconds",
      "prizePeriodRemainingSeconds():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_prizePeriodRemainingSeconds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "prizePeriodRemainingSeconds",
      "prizePeriodRemainingSeconds():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  prizePeriodSeconds(): BigInt {
    let result = super.call(
      "prizePeriodSeconds",
      "prizePeriodSeconds():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_prizePeriodSeconds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "prizePeriodSeconds",
      "prizePeriodSeconds():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  prizePeriodStartedAt(): BigInt {
    let result = super.call(
      "prizePeriodStartedAt",
      "prizePeriodStartedAt():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_prizePeriodStartedAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "prizePeriodStartedAt",
      "prizePeriodStartedAt():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  prizeStrategy(): Address {
    let result = super.call("prizeStrategy", "prizeStrategy():(address)", []);

    return result[0].toAddress();
  }

  try_prizeStrategy(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "prizeStrategy",
      "prizeStrategy():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rng(): Address {
    let result = super.call("rng", "rng():(address)", []);

    return result[0].toAddress();
  }

  try_rng(): ethereum.CallResult<Address> {
    let result = super.tryCall("rng", "rng():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rngRequestId(): BigInt {
    let result = super.call("rngRequestId", "rngRequestId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rngRequestId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rngRequestId", "rngRequestId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class CompleteAwardCall extends ethereum.Call {
  get inputs(): CompleteAwardCall__Inputs {
    return new CompleteAwardCall__Inputs(this);
  }

  get outputs(): CompleteAwardCall__Outputs {
    return new CompleteAwardCall__Outputs(this);
  }
}

export class CompleteAwardCall__Inputs {
  _call: CompleteAwardCall;

  constructor(call: CompleteAwardCall) {
    this._call = call;
  }
}

export class CompleteAwardCall__Outputs {
  _call: CompleteAwardCall;

  constructor(call: CompleteAwardCall) {
    this._call = call;
  }
}

export class ConstructCall extends ethereum.Call {
  get inputs(): ConstructCall__Inputs {
    return new ConstructCall__Inputs(this);
  }

  get outputs(): ConstructCall__Outputs {
    return new ConstructCall__Outputs(this);
  }
}

export class ConstructCall__Inputs {
  _call: ConstructCall;

  constructor(call: ConstructCall) {
    this._call = call;
  }

  get _manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _trustedForwarder(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructCall__Outputs {
  _call: ConstructCall;

  constructor(call: ConstructCall) {
    this._call = call;
  }
}

export class CurrentPrizeCall extends ethereum.Call {
  get inputs(): CurrentPrizeCall__Inputs {
    return new CurrentPrizeCall__Inputs(this);
  }

  get outputs(): CurrentPrizeCall__Outputs {
    return new CurrentPrizeCall__Outputs(this);
  }
}

export class CurrentPrizeCall__Inputs {
  _call: CurrentPrizeCall;

  constructor(call: CurrentPrizeCall) {
    this._call = call;
  }
}

export class CurrentPrizeCall__Outputs {
  _call: CurrentPrizeCall;

  constructor(call: CurrentPrizeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class EstimatePrizeCall extends ethereum.Call {
  get inputs(): EstimatePrizeCall__Inputs {
    return new EstimatePrizeCall__Inputs(this);
  }

  get outputs(): EstimatePrizeCall__Outputs {
    return new EstimatePrizeCall__Outputs(this);
  }
}

export class EstimatePrizeCall__Inputs {
  _call: EstimatePrizeCall;

  constructor(call: EstimatePrizeCall) {
    this._call = call;
  }
}

export class EstimatePrizeCall__Outputs {
  _call: EstimatePrizeCall;

  constructor(call: EstimatePrizeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class EstimatePrizeWithBlockTimeCall extends ethereum.Call {
  get inputs(): EstimatePrizeWithBlockTimeCall__Inputs {
    return new EstimatePrizeWithBlockTimeCall__Inputs(this);
  }

  get outputs(): EstimatePrizeWithBlockTimeCall__Outputs {
    return new EstimatePrizeWithBlockTimeCall__Outputs(this);
  }
}

export class EstimatePrizeWithBlockTimeCall__Inputs {
  _call: EstimatePrizeWithBlockTimeCall;

  constructor(call: EstimatePrizeWithBlockTimeCall) {
    this._call = call;
  }

  get secondsPerBlockFixedPoint18(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EstimatePrizeWithBlockTimeCall__Outputs {
  _call: EstimatePrizeWithBlockTimeCall;

  constructor(call: EstimatePrizeWithBlockTimeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _trustedForwarder(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _governor(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _prizeStrategy(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _rng(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _prizePeriodSeconds(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintedTicketsCall extends ethereum.Call {
  get inputs(): MintedTicketsCall__Inputs {
    return new MintedTicketsCall__Inputs(this);
  }

  get outputs(): MintedTicketsCall__Outputs {
    return new MintedTicketsCall__Outputs(this);
  }
}

export class MintedTicketsCall__Inputs {
  _call: MintedTicketsCall;

  constructor(call: MintedTicketsCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintedTicketsCall__Outputs {
  _call: MintedTicketsCall;

  constructor(call: MintedTicketsCall) {
    this._call = call;
  }
}

export class RedeemedTicketsCall extends ethereum.Call {
  get inputs(): RedeemedTicketsCall__Inputs {
    return new RedeemedTicketsCall__Inputs(this);
  }

  get outputs(): RedeemedTicketsCall__Outputs {
    return new RedeemedTicketsCall__Outputs(this);
  }
}

export class RedeemedTicketsCall__Inputs {
  _call: RedeemedTicketsCall;

  constructor(call: RedeemedTicketsCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemedTicketsCall__Outputs {
  _call: RedeemedTicketsCall;

  constructor(call: RedeemedTicketsCall) {
    this._call = call;
  }
}

export class StartAwardCall extends ethereum.Call {
  get inputs(): StartAwardCall__Inputs {
    return new StartAwardCall__Inputs(this);
  }

  get outputs(): StartAwardCall__Outputs {
    return new StartAwardCall__Outputs(this);
  }
}

export class StartAwardCall__Inputs {
  _call: StartAwardCall;

  constructor(call: StartAwardCall) {
    this._call = call;
  }
}

export class StartAwardCall__Outputs {
  _call: StartAwardCall;

  constructor(call: StartAwardCall) {
    this._call = call;
  }
}

export class TokensReceivedCall extends ethereum.Call {
  get inputs(): TokensReceivedCall__Inputs {
    return new TokensReceivedCall__Inputs(this);
  }

  get outputs(): TokensReceivedCall__Outputs {
    return new TokensReceivedCall__Outputs(this);
  }
}

export class TokensReceivedCall__Inputs {
  _call: TokensReceivedCall;

  constructor(call: TokensReceivedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get userData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get operatorData(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class TokensReceivedCall__Outputs {
  _call: TokensReceivedCall;

  constructor(call: TokensReceivedCall) {
    this._call = call;
  }
}
